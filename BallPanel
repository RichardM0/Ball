import java.awt.event.*;
import java.awt.Graphics;
import java.awt.Color;
import javax.swing.JPanel;
import javax.swing.Timer;
import java.util.ArrayList;
import java.util.Random;

public class BallPanel extends JPanel implements ActionListener
{
   private int delay = 10;
   protected Timer timer;
   private ArrayList<Ball> balls = new ArrayList<Ball>();
   
   private int radius = 15; // ball radius
   private double rotateSpeed = Math.PI / 2048;
   private boolean isStopped = false;
   private Color color = Color.red;
   private String movement = "linear";

   public BallPanel(int x, int y)
   {
      balls.add(new Ball(25, 25, 15,  System.currentTimeMillis()));
      timer = new Timer(delay, this);
      timer.start();      // start the timer
   }
   public void actionPerformed(ActionEvent e)
   // will run when the timer fires
   {
       repaint();
   }
   // draw rectrotateSpeeds and arcs
   public void paintComponent( Graphics g )
   {
       super.paintComponent( g ); // call superclass's paintComponent 
       // check for boundaries and reverse delta x/delta y
       for(Ball b : balls){
           g.setColor(b.getColor());
           if(b.getX()>BallFrame.frame.getWidth() - radius || b.getX()<0 + radius){
               b.setDx(-b.getDx());
           }
           if(b.getY()>BallFrame.frame.getHeight() - radius || b.getY()<0 + radius){
               b.setDy(-b.getDy());
           }
           // adjust ball position
           if(!isStopped){
                move(b);
           }
           // paint to screen
           g.fillOval((int)(b.getX() - radius), (int)(b.getY() - radius), radius*2, radius*2);
       }
   }
   public void setSpeed(double x, double y, int z){
       // check for the sign of delta x + delta y, adjust speed accordingly
       for(Ball b : balls){
           if(b.getDx()<0){
               b.setDx(-x);
           }
           else if(b.getDx()>0){
               b.setDx(x);
           }
           if(b.getDy()<0){
               b.setDy(-y);
           }
           else if(b.getDy()>0){
               b.setDy(y);
           }
           // circular motion speed
           rotateSpeed = Math.PI/z;  
       }
   }
   public void setStopped(){
       // stop all balls
       isStopped = true;
   }
   public void setStart(){
       // start the motion of all balls
       isStopped = false;
   }
   public void addBall(){
        // add ball to random position on screen
        Random r = new Random();
        int width = BallFrame.frame.getWidth();
        int height = BallFrame.frame.getHeight();
        int x = 30 + r.nextInt(30 + 3*width/4);
        int y = 30 + r.nextInt(30 + 3*height/4);
        Ball b = new Ball(x, y, 15, System.currentTimeMillis());
        b.setColor(color);
        balls.add(b);
   }
   public void setColor(Color c){
        // set color of all balls to some color
        color = c;
   }
   public void setMovement(String path){
        // set movement to some path
        movement = path;
   }
   public String getMovement(){
        // get what movement is active
        return movement;
   }
   public void move(Ball b){    
        // check what active path is, move ball respectively
        if(getMovement().equals("linear")){
            b.setX(b.getX() + b.getDx());
        }
        else if(getMovement().equals("circular")){
            circularMotion(b);
        }
        else if(getMovement().equals("parabolic")){
            parabolicMotion(b);
        }
        else if(getMovement().equals("sine")){
            sineMotion(b);
        }
        else if(getMovement().equals("ellipse")){
            ellipsoidMotion(b);
        }
   }
   public void circularMotion(Ball b){
        // (shift, radius) is the format (unit circle)
        b.setX(Double.valueOf(BallFrame.frame.getWidth()/2) + 240*Math.cos(b.getTime()*rotateSpeed));
        b.setY(Double.valueOf(BallFrame.frame.getHeight()/2) - 50 + 240*Math.sin(b.getTime()*rotateSpeed));
    }
   public void parabolicMotion(Ball b){
        // apply horizontal stretch to 
        int width = BallFrame.frame.getWidth();
        if(b.getY() > BallFrame.frame.getHeight()){
            b.setDx(-b.getDx());
        }
        b.setX(b.getX() + b.getDx());
        b.setY((5.0/Double.valueOf(width))*(Math.pow(b.getX() - width/2, 2)));
   }
   public void sineMotion(Ball b){
        // sinusoidal model using mathematic equations
        int height = BallFrame.frame.getHeight();
        b.setX(b.getX() + b.getDx()/3);
        b.setY(height/4 * Math.sin(b.getX()*(4*Math.PI/height)) + (height/2));
   }
   public void ellipsoidMotion(Ball b){
        // use circular motion and change one radius to be less to form ellipse
        b.setX(Double.valueOf(BallFrame.frame.getWidth()/2) + 240*Math.cos(b.getTime()*rotateSpeed));
        b.setY(Double.valueOf(BallFrame.frame.getHeight()/2) - 50 + 120*Math.sin(b.getTime()*rotateSpeed));
   }
}
