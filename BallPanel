import java.awt.event.*;
import java.awt.Graphics;
import java.awt.Color;
import javax.swing.JPanel;
import javax.swing.Timer;
import java.util.ArrayList;
import java.util.Random;

public class BallPanel extends JPanel implements ActionListener
{
   private int delay = 10;
   protected Timer timer;
   private ArrayList<Ball> balls = new ArrayList<Ball>();
   
   private int radius = 15; // ball radius
   private double rotateSpeed = Math.PI / 2048;

   private boolean isStopped = false;
   public static String speed = "low";
   private Color color = Color.red;
   private String movement = "linear";

   public BallPanel(int x, int y)
   {
      balls.add(new Ball(25, 25, 15,  System.currentTimeMillis()));
      timer = new Timer(delay, this);
      timer.start();      // start the timer
   }
   public void actionPerformed(ActionEvent e)
   // will run when the timer fires
   {
       repaint();
   }
   // draw rectrotateSpeeds and arcs
   public void paintComponent( Graphics g )
   {
       super.paintComponent( g ); // call superclass's paintComponent 
       // check for boundaries and reverse delta x/delta y
       for(Ball b : balls){
           g.setColor(b.getColor());
           if(b.getX()>this.getWidth() - radius || b.getX()<0 + radius){
               b.setX(b.getX()>this.getWidth() - radius ? this.getWidth() - radius : 0+radius);
               b.setDx(-b.getDx());
           }
           if(b.getY()>this.getHeight() - radius || b.getY()<0 + radius){
               b.setDy(-b.getDy());
           }
           // adjust ball position
           if(!isStopped){
                move(b);
           }
           // paint to screen
           g.fillOval((int)(b.getX() - radius), (int)(b.getY() - radius), radius*2, radius*2);
       }
   }
   public void setSpeed(double x, double y, int z, String s){
       // check for the sign of delta x + delta y, adjust speed accordingly
       speed = s;
       for(Ball b : balls){
           if(b.getDx()<0){
               b.setDx(-x);
           }
           else if(b.getDx()>0){
               b.setDx(x);
           }
           if(b.getDy()<0){
               b.setDy(-y);
           }
           else if(b.getDy()>0){
               b.setDy(y);
           }
           // circular motion speed
           rotateSpeed = Math.PI/z;  
       }
   }
   public void setStopped(){
       // stop all balls
       isStopped = true;
   }
   public void setStart(){
       // start the motion of all balls
       isStopped = false;
   }
   public void addBall(){
        // add ball to random position on screen
        Random r = new Random();
        int width = this.getWidth();
        int height = this.getHeight();
        int x = 30 + r.nextInt(30 + 3*width/4);
        int y = 30 + r.nextInt(30 + 3*height/4);
        Ball b = new Ball(x, y, 15, System.currentTimeMillis());
        b.setColor(color);
        balls.add(b);
   }
   public void setColor(Color c){
        // set color of all balls to some color
        color = c;
   }
   public void setMovement(String path){
        // set movement to some path
        movement = path;
   }
   public String getMovement(){
        // get what movement is active
        return movement;
   }
   public void move(Ball b){    
        // check what active path is, move ball respectively
        if(getMovement().equals("linear")){
            b.setX(b.getX() + b.getDx());
        }
        else if(getMovement().equals("circular")){
            circularMotion(b);
        }
        else if(getMovement().equals("parabolic")){
            parabolicMotion(b);
        }
        else if(getMovement().equals("sine")){
            sineMotion(b);
        }
        else if(getMovement().equals("ellipse")){
            ellipsoidMotion(b);
        }
   }
   public void circularMotion(Ball b){
        // (shift, radius) is the format (unit circle)
        int r = Math.min(this.getWidth(), this.getHeight() - radius);
        b.setX(Double.valueOf(this.getWidth()/2) + (r/2)*Math.cos(b.getTime()*rotateSpeed));
        b.setY(Double.valueOf(this.getHeight()/2) + (r/2)*Math.sin(b.getTime()*rotateSpeed));
    }
   public void parabolicMotion(Ball b){
        // apply horizontal stretch to 
        double width = this.getWidth();
        double height = this.getHeight() + 2*radius;
        if(b.getY() > height){
            b.setDx(-b.getDx());
        }
        b.setX(b.getX() + b.getDx());
        b.setY(4*height/(width*width)*(Math.pow(b.getX() - width/2, 2)));
   }
   public void sineMotion(Ball b){
        // sinusoidal model using mathematic equations
        int width = this.getWidth();
        int height = this.getHeight() - radius;
        b.setX(b.getX() + b.getDx()/3);
        b.setY(height/2 * Math.sin(b.getX()*(2*Math.PI/width)) + (height/2));
   }
   public void ellipsoidMotion(Ball b){
        // use circular motion and change one radius to be less to form ellipse
        int r = Math.min(this.getWidth(), this.getHeight() - radius);
        b.setX(Double.valueOf(this.getWidth()/2) + r/2*Math.cos(b.getTime()*rotateSpeed));
        b.setY(Double.valueOf(this.getHeight()/2) + (r/4)*Math.sin(b.getTime()*rotateSpeed));
   }
}
